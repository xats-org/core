name: WCAG 2.1 AA Accessibility Validation

on:
  push:
    branches: [ main, 'v*' ]
    paths:
      - 'schemas/**'
      - 'examples/**'
      - 'test/accessibility/**'
  pull_request:
    branches: [ main, 'v*' ]
    paths:
      - 'schemas/**'
      - 'examples/**'
      - 'test/accessibility/**'
  workflow_dispatch:

jobs:
  wcag-validation:
    name: WCAG 2.1 AA Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: |
        npm ci
        npm install -g ajv-cli

    - name: Run WCAG Validation Tests
      run: |
        npm run test:accessibility
      env:
        CI: true

    - name: Validate Example Documents
      id: validate-examples
      run: |
        echo "Validating example documents against WCAG 2.1 AA..."
        
        # Create results directory
        mkdir -p wcag-results
        
        # Validate each example document
        for example in examples/*.json; do
          if [ -f "$example" ]; then
            echo "Validating: $example"
            
            # Run WCAG validation using our custom validator
            node -e "
            const { WcagValidatorCLI } = require('./test/accessibility/wcag-validation-rules.ts');
            const validator = new WcagValidatorCLI();
            
            validator.validateFile('$example').then(result => {
              const report = validator.generateJsonReport(result);
              const fs = require('fs');
              const path = require('path');
              
              const filename = path.basename('$example', '.json');
              fs.writeFileSync(\`wcag-results/\${filename}-wcag-report.json\`, report);
              
              console.log(\`Results for \${filename}:\`);
              console.log(\`  Overall Score: \${result.score.overallCompliance}/100\`);
              console.log(\`  Critical Issues: \${result.score.criticalIssues}\`);
              console.log(\`  Major Issues: \${result.score.majorIssues}\`);
              console.log(\`  Minor Issues: \${result.score.minorIssues}\`);
              console.log(\`  Warnings: \${result.warnings.length}\`);
              
              if (!result.isValid) {
                console.error(\`❌ WCAG validation failed for \${filename}\`);
                process.exit(1);
              } else {
                console.log(\`✅ WCAG validation passed for \${filename}\`);
              }
            }).catch(error => {
              console.error('Validation error:', error);
              process.exit(1);
            });
            "
          fi
        done

    - name: Generate WCAG Compliance Summary
      if: always()
      run: |
        echo "# WCAG 2.1 AA Validation Summary" > wcag-summary.md
        echo "" >> wcag-summary.md
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> wcag-summary.md
        echo "**Commit:** ${{ github.sha }}" >> wcag-summary.md
        echo "" >> wcag-summary.md
        
        # Count results
        total_files=$(find wcag-results -name "*.json" | wc -l)
        echo "**Total Files Validated:** $total_files" >> wcag-summary.md
        echo "" >> wcag-summary.md
        
        # Analyze results
        if [ -d "wcag-results" ] && [ "$(ls -A wcag-results)" ]; then
          echo "## Validation Results" >> wcag-summary.md
          echo "" >> wcag-summary.md
          echo "| Document | Score | Critical | Major | Minor | Warnings | Status |" >> wcag-summary.md
          echo "|----------|-------|----------|--------|-------|----------|---------|" >> wcag-summary.md
          
          for report in wcag-results/*-wcag-report.json; do
            if [ -f "$report" ]; then
              filename=$(basename "$report" -wcag-report.json)
              
              # Extract data using jq if available, otherwise use basic parsing
              if command -v jq &> /dev/null; then
                score=$(jq -r '.score.overallCompliance' "$report")
                critical=$(jq -r '.score.criticalIssues' "$report")
                major=$(jq -r '.score.majorIssues' "$report")
                minor=$(jq -r '.score.minorIssues' "$report") 
                warnings=$(jq -r '.warnings | length' "$report")
                status=$(jq -r '.isValid' "$report")
                
                if [ "$status" = "true" ]; then
                  status_icon="✅"
                else
                  status_icon="❌"
                fi
              else
                # Fallback parsing without jq
                score="N/A"
                critical="N/A"
                major="N/A"
                minor="N/A"
                warnings="N/A"
                status_icon="⚠️"
              fi
              
              echo "| $filename | $score | $critical | $major | $minor | $warnings | $status_icon |" >> wcag-summary.md
            fi
          done
        else
          echo "No validation results found." >> wcag-summary.md
        fi
        
        echo "" >> wcag-summary.md
        echo "## Key WCAG 2.1 AA Requirements Checked" >> wcag-summary.md
        echo "" >> wcag-summary.md
        echo "- **1.1.1 Non-text Content (Level A)** - Alternative text for images and media" >> wcag-summary.md
        echo "- **1.3.1 Info and Relationships (Level A)** - Proper semantic structure" >> wcag-summary.md
        echo "- **1.3.2 Meaningful Sequence (Level A)** - Logical reading order" >> wcag-summary.md
        echo "- **2.4.1 Bypass Blocks (Level A)** - Skip navigation mechanisms" >> wcag-summary.md
        echo "- **2.4.3 Focus Order (Level A)** - Logical keyboard navigation" >> wcag-summary.md
        echo "- **2.4.6 Headings and Labels (Level AA)** - Descriptive headings" >> wcag-summary.md
        echo "- **3.1.1 Language of Page (Level A)** - Document language identification" >> wcag-summary.md
        echo "- **3.1.2 Language of Parts (Level AA)** - Multi-language content marking" >> wcag-summary.md

    - name: Upload WCAG Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: wcag-validation-reports-${{ github.run_number }}
        path: |
          wcag-results/
          wcag-summary.md
        retention-days: 30

    - name: Comment on PR with WCAG Results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('wcag-summary.md', 'utf8');
            
            // Post comment on PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## WCAG 2.1 AA Validation Results\n\n${summary}\n\n*This comment was automatically generated by the WCAG validation workflow.*`
            });
          } catch (error) {
            console.log('Could not post PR comment:', error);
          }

    - name: Set Job Status
      if: always()
      run: |
        if [ -f "wcag-results" ] && grep -q '"isValid": false' wcag-results/*.json 2>/dev/null; then
          echo "❌ WCAG validation failed for one or more documents"
          exit 1
        else
          echo "✅ All documents passed WCAG validation"
        fi

  accessibility-audit:
    name: Full Accessibility Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install Dependencies
      run: npm ci

    - name: Run Full Accessibility Test Suite
      run: |
        npm run test:accessibility:full
        npm run test:accessibility:integration

    - name: Generate Comprehensive Audit Report
      run: |
        echo "# Comprehensive Accessibility Audit Report" > accessibility-audit.md
        echo "" >> accessibility-audit.md
        echo "**Generated:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> accessibility-audit.md
        echo "**Commit:** ${{ github.sha }}" >> accessibility-audit.md
        echo "**Branch:** ${{ github.ref_name }}" >> accessibility-audit.md
        echo "" >> accessibility-audit.md
        
        # Add schema analysis
        echo "## Schema Analysis" >> accessibility-audit.md
        echo "" >> accessibility-audit.md
        echo "Analysis of xats schema versions for WCAG 2.1 AA compliance capability:" >> accessibility-audit.md
        echo "" >> accessibility-audit.md
        
        for schema in schemas/*/xats.json; do
          if [ -f "$schema" ]; then
            version=$(dirname "$schema" | xargs basename)
            echo "### Schema Version $version" >> accessibility-audit.md
            echo "" >> accessibility-audit.md
            
            # Analyze schema features (basic analysis)
            if grep -q '"altText"' "$schema"; then
              echo "- ✅ Supports alternative text for resources" >> accessibility-audit.md
            else
              echo "- ❌ Missing alternative text support" >> accessibility-audit.md
            fi
            
            if grep -q '"language"' "$schema"; then
              echo "- ✅ Supports language identification" >> accessibility-audit.md
            else
              echo "- ❌ Missing language identification support" >> accessibility-audit.md
            fi
            
            if grep -q '"level"' "$schema"; then
              echo "- ✅ Supports heading level specification" >> accessibility-audit.md
            else
              echo "- ❌ Missing heading level support" >> accessibility-audit.md
            fi
            
            echo "" >> accessibility-audit.md
          fi
        done
        
        # Add recommendations
        echo "## Recommendations for Schema Enhancement" >> accessibility-audit.md
        echo "" >> accessibility-audit.md
        echo "1. **Add accessibility metadata framework**" >> accessibility-audit.md
        echo "2. **Implement language identification properties**" >> accessibility-audit.md
        echo "3. **Enhance semantic markup support**" >> accessibility-audit.md
        echo "4. **Add skip navigation block types**" >> accessibility-audit.md
        echo "5. **Implement cognitive accessibility features**" >> accessibility-audit.md

    - name: Upload Comprehensive Report
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-audit-full-${{ github.run_number }}
        path: accessibility-audit.md
        retention-days: 90

  schema-impact-analysis:
    name: Schema Impact Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Analyze Schema Changes
      run: |
        echo "# Schema Accessibility Impact Analysis" > schema-impact.md
        echo "" >> schema-impact.md
        echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> schema-impact.md
        echo "**Author:** ${{ github.event.pull_request.user.login }}" >> schema-impact.md
        echo "" >> schema-impact.md
        
        # Check for schema file changes
        changed_files=$(git diff --name-only HEAD^ HEAD | grep -E "(schemas/|examples/)" || true)
        
        if [ -n "$changed_files" ]; then
          echo "## Changed Files with Accessibility Impact" >> schema-impact.md
          echo "" >> schema-impact.md
          for file in $changed_files; do
            echo "- \`$file\`" >> schema-impact.md
          done
          echo "" >> schema-impact.md
          
          # Analyze specific accessibility-related changes
          echo "## Accessibility Impact Assessment" >> schema-impact.md
          echo "" >> schema-impact.md
          
          if echo "$changed_files" | grep -q "schemas/"; then
            echo "🔍 **Schema changes detected** - Full WCAG validation required" >> schema-impact.md
            
            # Check for accessibility-related keywords in changes
            if git diff HEAD^ HEAD | grep -qi "altText\|language\|heading\|level\|accessibility"; then
              echo "✅ **Positive impact** - Accessibility-related properties modified" >> schema-impact.md
            fi
            
            if git diff HEAD^ HEAD | grep -qi "required.*altText\|required.*language"; then
              echo "🚨 **Breaking change** - New accessibility requirements added" >> schema-impact.md
            fi
          fi
          
          if echo "$changed_files" | grep -q "examples/"; then
            echo "📝 **Example updates** - Verify compliance with current standards" >> schema-impact.md
          fi
        else
          echo "No schema or example changes detected in this PR." >> schema-impact.md
        fi
        
        echo "" >> schema-impact.md
        echo "## Next Steps" >> schema-impact.md
        echo "" >> schema-impact.md
        echo "- [ ] Review WCAG validation results" >> schema-impact.md
        echo "- [ ] Update documentation if needed" >> schema-impact.md
        echo "- [ ] Test with assistive technologies" >> schema-impact.md
        echo "- [ ] Update example documents" >> schema-impact.md

    - name: Comment Schema Impact on PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const impact = fs.readFileSync('schema-impact.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: impact
            });
          } catch (error) {
            console.log('Could not post schema impact comment:', error);
          }