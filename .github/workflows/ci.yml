name: CI

on:
  push:
    branches: 
      - main
      - 'v*.*.*'  # Version branches (v0.2.0, v0.3.0, etc.)
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'
      - '.prettierrc'
      - '.eslintignore'
  pull_request:
    branches: 
      - main
      - 'v*.*.*'  # PRs targeting version branches
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.claude/**'
      - 'LICENSE'
      - '.gitignore'
      - '.prettierrc'
      - '.eslintignore'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Single build job that other jobs depend on
  build-and-cache:
    name: Build and Cache
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Cache Turbo build outputs
      uses: actions/cache@v4
      with:
        path: |
          .turbo
          packages/*/dist
          packages/*/.turbo
          node_modules/.cache
        key: ${{ runner.os }}-turbo-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-turbo-${{ hashFiles('**/pnpm-lock.yaml') }}-
          ${{ runner.os }}-turbo-
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Build packages with Turborepo
      run: pnpm run build
      env:
        TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
        TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
        TURBO_REMOTE_CACHE_READ_ONLY: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true }}
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-outputs
        path: |
          packages/*/dist
          .turbo
        retention-days: 1
        compression-level: 6  # Balanced compression for faster uploads
        if-no-files-found: warn

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
        
    - name: Run linter
      run: pnpm run lint
      
    - name: Run formatter check
      run: pnpm run format:check

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Type check
      run: pnpm run typecheck

  test:
    name: Test on Node.js ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    strategy:
      fail-fast: true
      matrix:
        node-version: [18, 20, 22]
        # Run fewer Node versions on PRs from forks
        exclude:
          - node-version: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork && 18 || '' }}
          - node-version: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork && 22 || '' }}
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Run tests
      run: pnpm run test
      
    - name: Run tests with coverage
      run: pnpm run test:coverage
      if: matrix.node-version == 20
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.node-version == 20
      with:
        files: ./coverage/lcov.info,./packages/*/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  validate-examples:
    name: Validate Example Documents
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Validate example documents
      run: |
        # Run validation through the CLI package if script exists
        if [ -f "packages/cli/package.json" ] && grep -q "validate:examples" "packages/cli/package.json"; then
          pnpm --filter @xats/cli run validate:examples
        else
          echo "Validation script not found, skipping"
        fi
        
    - name: Test CLI commands
      run: |
        # Test CLI help and version if CLI exists
        if [ -f "packages/cli/package.json" ] && grep -q '"cli"' "packages/cli/package.json"; then
          pnpm --filter @xats/cli run cli -- --help || true
          pnpm --filter @xats/cli run cli -- --version || true
        else
          echo "CLI package not found, skipping"
        fi

  schema-validation:
    name: Validate JSON Schema
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Validate schema syntax
      run: |
        if [ -f "packages/schema/package.json" ] && grep -q '"validate"' "packages/schema/package.json"; then
          pnpm --filter @xats/schema run validate
        else
          echo "Schema validation script not found, skipping"
        fi

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run security audit
      run: pnpm audit --audit-level=high || true
      continue-on-error: true
      
    - name: Check for production vulnerabilities
      run: pnpm audit --audit-level=high --production
      continue-on-error: true

  # Removed duplicate build job - using build-and-cache instead
  
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Run integration tests
      run: |
        if [ -d "tests/integration" ] && [ "$(find tests/integration -name '*.test.ts' -o -name '*.spec.ts' 2>/dev/null | head -1)" ]; then
          pnpm run test:integration
        else
          echo "No integration test files found, skipping"
        fi
      
    - name: Test package linking
      run: |
        # Test that packages can be linked locally if CLI exists
        if [ -f "packages/cli/package.json" ]; then
          cd packages/cli
          pnpm link --global || true
          xats --version || true
        else
          echo "CLI package not found, skipping linking test"
        fi
        
    - name: Test cross-package functionality
      run: |
        # Run end-to-end tests that verify package integration
        if [ -d "tests/e2e" ] && [ "$(find tests/e2e -name '*.test.ts' -o -name '*.spec.ts' 2>/dev/null | head -1)" ]; then
          pnpm run test:e2e
        else
          echo "No E2E test files found, skipping"
        fi

  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Run benchmarks
      run: |
        if grep -q '"bench"' package.json; then
          pnpm run bench || true
        else
          echo "Benchmark script not found, skipping"
        fi
      
    - name: Check bundle sizes
      run: echo "Bundle size checking temporarily disabled - will be implemented in future version"

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: [build-and-cache]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'pnpm'
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: build-outputs
      
    - name: Build documentation
      run: |
        if grep -q '"docs:build"' package.json; then
          pnpm run docs:build || true
        elif grep -q '"docs"' package.json; then
          pnpm run docs || true
        else
          echo "Documentation build script not found, skipping"
        fi
      
    - name: Check for broken links
      run: |
        if grep -q '"docs:check-links"' package.json; then
          pnpm run docs:check-links || true
        else
          echo "Link checking script not found, skipping"
        fi
        
  # Summary job to ensure all checks pass
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test, validate-examples, schema-validation, security, integration, docs]
    if: always()
    
    steps:
    - name: Check CI Status
      run: |
        if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]; then
          echo "CI checks failed!"
          exit 1
        else
          echo "All CI checks passed!"
        fi