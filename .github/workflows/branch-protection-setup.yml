name: Setup Branch Protection

on:
  create:
    # Triggered when a branch or tag is created
  workflow_dispatch:
    # Manual trigger with branch name input
    inputs:
      branch:
        description: 'Branch name to protect'
        required: true
        type: string

jobs:
  setup-protection:
    name: Configure Branch Protection
    runs-on: ubuntu-latest
    # Only run on branch creation (not tags) or manual trigger
    if: |
      (github.event_name == 'create' && github.event.ref_type == 'branch') ||
      github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      administration: write  # Required to modify branch protection
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Determine branch name
      id: branch
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          BRANCH="${{ github.event.inputs.branch }}"
        else
          # For create event, extract branch name from ref
          BRANCH="${GITHUB_REF#refs/heads/}"
        fi
        echo "name=${BRANCH}" >> $GITHUB_OUTPUT
        echo "Branch to protect: ${BRANCH}"
    
    - name: Check if version branch
      id: check
      run: |
        BRANCH="${{ steps.branch.outputs.name }}"
        # Check if it's a version branch (v*.*.*)
        if [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is_version=true" >> $GITHUB_OUTPUT
          echo "This is a version branch"
        else
          echo "is_version=false" >> $GITHUB_OUTPUT
          echo "Not a version branch, skipping protection setup"
        fi
    
    - name: Setup branch protection
      if: steps.check.outputs.is_version == 'true' || steps.branch.outputs.name == 'main'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH="${{ steps.branch.outputs.name }}"
        
        # Define required status checks based on branch type
        # These job names match the ci.yml workflow jobs
        if [ "$BRANCH" == "main" ]; then
          CHECKS='[
            "Lint",
            "Type Check",
            "Test on Node.js 18",
            "Test on Node.js 20",
            "Test on Node.js 22",
            "Security Audit",
            "Validate JSON Schema",
            "Validate Example Documents",
            "Build and Cache",
            "Integration Tests"
          ]'
          echo "Setting up comprehensive protection for main branch"
        else
          CHECKS='[
            "Lint",
            "Type Check",
            "Test on Node.js 20",
            "Build and Cache"
          ]'
          echo "Setting up standard protection for version branch"
        fi
        
        # Create protection rules
        PROTECTION_JSON=$(cat <<EOF
        {
          "required_status_checks": {
            "strict": false,
            "contexts": $CHECKS
          },
          "enforce_admins": false,
          "required_pull_request_reviews": {
            "required_approving_review_count": 1,
            "dismiss_stale_reviews": true,
            "require_code_owner_reviews": false,
            "require_last_push_approval": false
          },
          "restrictions": null,
          "allow_force_pushes": false,
          "allow_deletions": false,
          "block_creations": false,
          "required_conversation_resolution": false,
          "lock_branch": false,
          "allow_fork_syncing": false
        }
        EOF
        )
        
        # Apply protection
        echo "Applying branch protection to $BRANCH..."
        gh api \
          --method PUT \
          "repos/${{ github.repository }}/branches/${BRANCH}/protection" \
          --input - <<< "$PROTECTION_JSON"
        
        echo "✅ Branch protection successfully configured for $BRANCH"
    
    - name: Verify protection
      if: steps.check.outputs.is_version == 'true' || steps.branch.outputs.name == 'main'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH="${{ steps.branch.outputs.name }}"
        echo "Verifying protection for $BRANCH..."
        
        # Get and display the protection status
        gh api "repos/${{ github.repository }}/branches/${BRANCH}/protection/required_status_checks" | \
          jq -r '.contexts[]' | \
          sed 's/^/  ✓ /'
    
    - name: Post summary
      if: steps.check.outputs.is_version == 'true' || steps.branch.outputs.name == 'main'
      run: |
        BRANCH="${{ steps.branch.outputs.name }}"
        cat >> $GITHUB_STEP_SUMMARY <<EOF
        ## Branch Protection Setup Complete ✅
        
        **Branch:** \`${BRANCH}\`
        
        ### Applied Rules:
        - ✅ Required status checks configured
        - ✅ PR reviews required (1 approval)
        - ✅ Stale review dismissal enabled
        - ✅ Force push protection enabled
        - ✅ Deletion protection enabled
        
        ### Required Status Checks:
        EOF
        
        # Add the list of checks to summary
        gh api "repos/${{ github.repository }}/branches/${BRANCH}/protection/required_status_checks" 2>/dev/null | \
          jq -r '.contexts[]' | \
          sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "Could not retrieve checks" >> $GITHUB_STEP_SUMMARY